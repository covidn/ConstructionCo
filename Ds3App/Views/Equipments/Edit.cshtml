@model Ds3App.Models.Equipment

@{
    ViewBag.Title = "Edit";
}



@using (Html.BeginForm("Edit", "Equipments", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-sm-6">
            <div class="form-horizontal">
                <h2>Edit</h2>
                @if (ViewBag.Error != null)
                {
                    <div class="alert alert-danger">
                        <button class="close" data-dismiss="alert">&times;</button>
                        <p>
                            @(ViewBag.Error)
                        </p>
                    </div>
                }
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.IsDeleted)

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.EquipmentName, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.EquipmentName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EquipmentName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.RatePerHour, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.RatePerHour, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RatePerHour, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.EquipmentImage, htmlAttributes: new { @class = "control-label" })

                        <input type="file" name="file" required />
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button class="btn btn-outline-success" type="submit"><span class="fa fa-save"></span> Save</button>&nbsp;<a class="btn btn-outline-danger" href="@(Url.Action("Index"))">Back</a>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            @if (!string.IsNullOrEmpty(Model.EquipmentImage))
            {
                <br />
                <br />
                <br />
                <br />
                <div class="card text-center">
                    <div class="card-body">
                        <h3>Current Image</h3>
                        <img style="width:200px;max-width:100%;" src="~/ProjImages/@(Model.EquipmentImage)" />

                    </div>
                </div>
            }
        </div>
    </div>

}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
